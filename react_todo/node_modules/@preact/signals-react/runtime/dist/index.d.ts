import { Signal } from "@preact/signals-core";
export { installAutoSignalTracking } from "./auto";
export declare function wrapJsx<T>(jsx: T): T;
declare const symDispose: unique symbol;
interface Effect {
    _sources: object | undefined;
    _start(): () => void;
    _callback(): void;
    _dispose(): void;
}
export interface EffectStore {
    effect: Effect;
    subscribe(onStoreChange: () => void): () => void;
    getSnapshot(): number;
    /** finishEffect - stop tracking the signals used in this component */
    f(): void;
    [symDispose](): void;
}
/**
 * Custom hook to create the effect to track signals used during render and
 * subscribe to changes to rerender the component when the signals change.
 */
export declare function useSignals(): EffectStore;
export declare function useSignal<T>(value: T): Signal<T>;
export declare function useComputed<T>(compute: () => T): import("@preact/signals-core").ReadonlySignal<T>;
export declare function useSignalEffect(cb: () => void | (() => void)): void;
