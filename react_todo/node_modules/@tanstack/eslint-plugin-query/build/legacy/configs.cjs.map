{"version":3,"sources":["../../src/configs.ts"],"sourcesContent":["import { rules } from './rules'\nimport type { TSESLint } from '@typescript-eslint/utils'\n\nfunction generateRecommendedConfig(\n  allRules: Record<string, TSESLint.RuleModule<any, any>>,\n) {\n  return Object.entries(allRules).reduce((memo, [name, rule]) => {\n    const { recommended } = rule.meta.docs || {}\n\n    return {\n      ...memo,\n      ...(recommended ? { [`@tanstack/query/${name}`]: recommended } : {}),\n    }\n  }, {} as Record<string, 'strict' | 'error' | 'warn'>)\n}\n\nexport const configs = {\n  recommended: {\n    plugins: ['@tanstack/eslint-plugin-query'],\n    rules: generateRecommendedConfig(rules),\n  },\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAsB;AAGtB,SAAS,0BACP,UACA;AACA,SAAO,OAAO,QAAQ,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM;AAC7D,UAAM,EAAE,YAAY,IAAI,KAAK,KAAK,QAAQ,CAAC;AAE3C,WAAO;AAAA,MACL,GAAG;AAAA,MACH,GAAI,cAAc,EAAE,CAAC,mBAAmB,IAAI,EAAE,GAAG,YAAY,IAAI,CAAC;AAAA,IACpE;AAAA,EACF,GAAG,CAAC,CAAgD;AACtD;AAEO,IAAM,UAAU;AAAA,EACrB,aAAa;AAAA,IACX,SAAS,CAAC,+BAA+B;AAAA,IACzC,OAAO,0BAA0B,kBAAK;AAAA,EACxC;AACF;","names":[]}